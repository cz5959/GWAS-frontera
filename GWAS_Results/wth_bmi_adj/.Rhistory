#install.packages("mashr")
library(ashr)
library(mashr)
set.seed(1)
simdata = simple_sims(500,2,0.5)
data = mash_set_data(simdata$Bhat, simdata$Shat)
U.c = cov_canonical(data)
print(names(U.c))
m.c = mash(data, U.c)
paste("p",1)
paste("p",1,sep="")
paste("p",1,sep="") <- pm
paste("p",1,sep="") <- U.c
assign(paste0("x", "y"), 1)
for ( i in 1:3) {
assign(paste0("x", i), i)
}
x1+x2
g_array <- array(0)
g_array[,i] <- x1
g_array[i] <- x1
for ( i in 1:3) {
assign(paste0("x", i), i)
g_array[i] <- x1
}
g_array[i] <- paste("x",1,sep="")
for ( i in 1:3) {
assign(paste0("x", i), i)
g_array[i] <- paste("x",1,sep="")
}
g_array[i]
g_array[i] <- assign(paste0("x", i), i)
for ( i in 1:3) {
g_array[i] <- assign(paste0("x", i), i)
}
test <- function(x){
y <- x+2
y2 <- x+5
}
return y, y2
test <- function(x){
y <- x+2
y2 <- x+5
return(y, y2)
}
y1,y2 <- test(2)
(y1,y2) <- test(2)
(y1,y2) <- test(2)
c(y1,y2) <- test(2)
test <- function(x){
y <- x+2
y2 <- x+5
return(list(y,y2))
}
results <- test(2)
results[1]
results[[1]]
results[[2]]
head(mtcars)
min(mtcars$mpg)
min(mtcars[mtcars$mpg != 10.4,])
min(mtcars[mtcars$mpg != 10.4,])
mtcars[mtcars$mpg != 10.4,]
min(mtcars[mtcars$mpg != 10.4,]$mpg)
min(mtcars$mpg)
mtcars$mpg[mtcars$mpg == 10.4] <- 13.3
min(mtcars$mpg)
head(mtcars)
null.model <- lm(mpg ~ cyl, data=mtcars)
str(null.model)
head(null.model$rank)
head(null.model$fitted.values)
head(mtcars)
head(null.model$effects)
head(null.model$coefficients)
null.model$coefficients
summary(null.model)
summary(null.model)$r.squared
summary(null.model)$coefficients
null.model <- lm(mpg ~ cyl, data=mtcars)
str(null.model)
summary(null.model)
summary(null.model)$f-statistic
names(summary(null.model))
summary(null.model)$fstatistic
for(i in 1:6) { #-- Create objects  'r.1', 'r.2', ... 'r.6' --
nam <- paste("r", i, sep = ".")
assign(nam, 1:i)
}
r.2
head(mtcars)
null.model <- lm(mpg ~ cyl, data=mtcars)
model <- lm(mpg ~ cyl, data=mtcars)
summary(model)
summary(model)$residuals
summary(model)
str(model)
str(model)$df.residual
str(model)
model$df.residual
str(model)
model$fitted.values
summary(model)$residuals
head(mtcars)
model.fitted <- NULL
model.fitted <- rbind(model.fitted, model$fitted.values)
head(model.fitted)
model.fitted <- rbind(model.fitted, model$fitted.values)
head(model.fitted)
nrow(model.fitted)
model.fitted <- rbind(model.fitted, model$fitted.values)
nrow(model.fitted)
model.fitted <- NULL
model.fitted <- cbind(model.fitted, model$fitted.values)
head(model.fitted)
model.fitted <- data.frame(cbind(model.fitted, model$fitted.values))
model.fitted <- NULL
model.fitted <- data.frame(cbind(model.fitted, model$fitted.values))
head(model.fitted)
model.fitted <- NULL
model.fitted <- data.frame(model.fitted, model$fitted.values)
head(model.fitted)
model.fitted <- NULL
model.fitted <- cbind(model.fitted, data.frame(model$fitted.values))
model.fitted <- NULL
model.fitted <- cbind(model.fitted, model$fitted.values)
head(model.fitted)
p.threshold <- c('1', '0.01', '1e-5', '1e-8')
pgs.fitted <- data.frame(matrix(ncol=length(p.threshold),nrow=0))
colnames(pgs.fitted) <- p.threshold
head(pgs.fitted)
pgs.fitted$i
pgs.fitted$i <- model.$fitted.values
pgs.fitted$i <- model$fitted.values
pgs.fitted$i <- model$fitted.values
pgs.fitted$i <-
model$fitted.values
pgs.fitted$i <-
model$fitted.values
model$fitted.values
c(model$fitted.values)
str(model$fitted.values)
model.fitted <- NULL
for (i in p.threshold) {
model.fitted <- rbind(model.fitted, data.frame(Threshold=i, model$fitted.values))
}
str(model.fitted)
head(model.fitted)
for (i in p.threshold) {
model.fitted <- rbind(model.fitted, data.frame(i = model$fitted.values))
}
model.fitted <- NULL
for (i in p.threshold) {
model.fitted <- rbind(model.fitted, data.frame(i = model$fitted.values))
}
head(model.fitted)
model.fitted <- NULL
for (i in p.threshold) {
model.fitted <- rbind(model.fitted, data.frame(model$fitted.values))
}
head(model.fitted)
nrow(model.fitted)
model.fitted <- NULL
for (i in p.threshold) {
model.fitted <- cbind(model.fitted, data.frame(model$fitted.values))
}
height_f=c(0.2056,0.1590,0.2142)
height_m=c(0.2075,0.1441,0.2028)
bmi_f=c(0.0604,0.0346,0.0582)
bmi_m=c(0.0546,0.0346,0.0566)
testosterone_f=c(0.0005,0.0082,0.0076)
testosterone_m=c(0.0652,0.0636,0.0627)
waist_hip_bmi_f=c(0.0425,0.0516,0.0490)
waist_hip_bmi_m=c(0.0161,0.0135,0.0166)
df <- cbind(height_f,height_m,bmi_f,bmi_m,testosterone_f,testosterone_m,waist_hip_bmi_f,waist_hip_bmi_m)
types<-c('Add-both',"Add-same","mash-same")
rownames(df) <- types
df
colors=c('azure1','azure2','azure3')
barplot(df,beside=T,col=colors,ylim=c(0,0.26),legend=TRUE,args.legend=(list(x="top",ncol=3)))
x1 <- c(1,2,3,4,5)
assign(test,x1)
head(mtcars)
head(paste0('mt','cars')$mpg)
test <- list(c1=mtcars$mpg, c2=mtcars$cyl)
str(test)
test$c1
sex <- c1
test$sex
test$paste0(sex)
test$sex
test$paste0()
test$paste0(sex)
test[sex]
sex <- 'c1'
test[sex]
test <-function(x,y,z=1){
print(x+y+z)
}
test(1,2,3)
test(1,2)
head(mtcars)
mtcars[3,]
mtcars[,3]
str(cars)
str(cars)
str(mtcars)
mtcars[,8] < factor(mtcars[,8])
mtcars[,8] <- factor(mtcars[,8])
str(mtcars)
#######
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
#######
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
#######
sample <- sample(c(TRUE, FALSE), nrow(mtcars), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
train <- mtcars[sample, ]
test <- mtcars[!sample, ]
head(test)
install.packages('tidyverse')
library(tidyverse)
data(iris)
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point()
print(IrisPlot)
+ labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point()
+ labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point()
+ labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + title("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length", title="Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + opts(title="Title")
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + ggtitle(title="Title")
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + ggtitle("Title")
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length", title="Petal and Sepal Length of Iris") +
theme(plot.title = element_markdown())
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length", title="Petal and Sepal Length of Iris") +
theme(plot.title = element_text())
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length", title="Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, colour=Species))
+ geom_point()
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, colour=Species)) + geom_point()
print(IrisPlot)
print(IrisPlot + labs(y="Petal length (cm)", x = "Sepal length (cm)") + ggtitle("Petal and sepal length of iris"))
library(ggplot2)
library(ggpubr)
library(reshape2)
# set up and load in files
pheno <- "wth_bmi_adj"
setwd("~/Research/GWAS-frontera/Phenotypes")
df_testosterone <- read.csv("pheno_testosterone.txt", sep="\t", colClasses = c("NULL","integer","numeric"))
df_pheno <- read.csv(paste0("pheno_",pheno,".txt"), sep="\t", colClasses = c("NULL","integer","numeric"))
df_sex <- read.csv("sex_ids.txt", sep="\t")
colnames(df_pheno) <- c('IID','pheno')
# get PGS scores
setwd(paste0("~/Research/GWAS-frontera/GWAS_results/",pheno))
df_both <- read.csv(paste0("both_sex_additive_",pheno,".1e-5.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_f <- read.csv(paste0("female_additive_",pheno,".1e-5.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_m <- read.csv(paste0("male_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_f <- read.csv(paste0("female_mash_",pheno,".1e-5.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_m <- read.csv(paste0("male_mash_",pheno,".1.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
score <- Reduce(function(x,y) merge(x,y, by='IID'), list(df_both, df_add_f, df_add_m, df_mash_f, df_mash_m))
colnames(score) <- c('IID', 'both', 'add_female', 'add_male', 'mash_female', 'mash_male')
# merge dataframes - testosterone, sex, pheno, pgs scores f, pgs scores m
df <- merge(merge(df_testosterone, df_sex, by='IID'), df_pheno, by='IID')
df <- merge(df,score,by='IID')
# order by testosterone
df <- df[order(df$testosterone),]
# label then split by sex
df$sex[df$sex == 1] <- 'male'
df$sex[df$sex == 0] <- 'female'
df_m <- df[df$sex == 'male',]
df_f <- df[df$sex == 'female',]
# find intercept for overlaps
f_inter = mean(df_f$testosterone) + 2*sd(df_f$testosterone)
m_inter = mean(df_m$testosterone) - 2*sd(df_m$testosterone)
# histogram of testosterone frequency between sex
ggplot(df, aes(x=testosterone, fill=sex)) +
geom_histogram(alpha=0.5, position='identity', bins=50) +
geom_vline(xintercept = f_inter, color='red') +
geom_vline(xintercept = m_inter, color='blue')
# create dataframe with the overlaps
overlap <- df_m[df_m$testosterone <= m_inter,]
overlap <- rbind(overlap, df_f[df_f$testosterone >= f_inter,])
# remove overlapping from the non-overlapping df
df_m <- df_m[! df_m$IID %in% overlap$IID,]
df_f <- df_f[! df_f$IID %in% overlap$IID,]
# get lm results from each testosterone bin
bin_fun <- function(data, n, sex) {
intervals = seq(0,nrow(data),nrow(data)/n)
cuts <- cut(1:nrow(data), breaks = intervals)
results <- NULL
types <- c('both', 'add', 'mash')
#types <- c('add')
for (type in types) {
if (type == 'both') {
formula <- "pheno ~ both"
} else {
formula <- paste0("pheno ~ ", type, "_", sex)
}
for (i in 1:n) {
bin <- data[cuts == levels(cuts)[i],]
model <- lm(formula, data = bin)
beta <- model$coefficients[2]
stderror <- summary(model)$coefficients[2,2]
T_mean <- mean(bin$testosterone)
results <- rbind(results, data.frame(Testosterone=T_mean, Beta=beta, Error=stderror, Sex=sex, Type=type))
}
}
return(results)
}
# call function for overlap and nonoverlaps
m_results <- bin_fun(df_m,10,'male')
f_results <- bin_fun(df_f,10,'female')
overlap_results_m <- bin_fun(overlap[overlap$sex=='male',],1,'male')
overlap_results_f <- bin_fun(overlap[overlap$sex=='female',],1,'female')
results <- rbind(m_results, f_results)
results_all <- rbind(rbind(rbind(m_results, f_results), overlap_results_m), overlap_results_f)
results_long <- melt(results, id.vars=c("Testosterone","Sex"))
overlap_results <- rbind(overlap_m, overlap_results_f)
overlap_results <- rbind(overlap_results_m, overlap_results_f)
results <- rbind(m_results, f_results)
results_all <- rbind(rbind(rbind(m_results, f_results), overlap_results_m), overlap_results_f)
results_long <- melt(results, id.vars=c("Testosterone","Sex"))
labels <- c(add="additive sex-specific", both="additive both-sex", mash="mash sex-specific")
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta), color='green') +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1, fullrange=TRUE) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) #+
#geom_smooth(data=results, method="lm",alpha=0.1, fullrange=TRUE)
+
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1, fullrange=TRUE) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
line(predict(lm(Beta~Testosterone, results)), col='green')
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
lines(predict(lm(Beta~Testosterone, results)), col='green')
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_line(predict(lm(Beta~Testosterone, results)), col='green')
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_abline(1,1) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_abline()
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_abline(intercept=1) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_abline() +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1, se=F) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Waist:Hip (BMI. adj)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.8, label.y.npc=0.98, show.legend=FALSE)
