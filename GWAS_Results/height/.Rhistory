df[df$X1 < 0,].index()
which(df[df$X1 < 0,])
which(df[df$X1 < 0,] == TRUE)
str(df)
df[df$X1 < 0,]
which(df$X1 < -1)
df$x1
df$X1
df
which(df$X1 < -1)
which(df$X1 < -1,)
which(df$X1<0)
df$ix
df <- df[order(df$X1, index.return=TRUE),]
index.df
df <- df[order(df$X1),]
df$i
df$idx
df$ix
df
df <- df[order(df$X1)]
df <- df[order(df$X1),]
dups <- df[order(df$X1),duplicated(df$X1),]
dups
dups <- df[order(df$X1),duplicated(df$X1)==TRUE,]
dups
duplicated(x)
x <- c(4, 1, 4, 5, 1, 6)
duplicated(x)
x[duplicated(x)]
x[!duplicated(x)]
df[df$X1<-1 | df$X1 >1]
df[df$X1<-1 | df$X1 >1],
df[(df$X1<-1 | df$X1 >1),]
df[df$X1<-1]
df[df$X1<-1],
df[df$X1<-1,]
df
> df = data.frame(matrix(rnorm(20), nrow=10))
df = data.frame(matrix(rnorm(20), nrow=10))
df[df$X1 < -1]
df[df$X1 < -1,]
df[(df$X1 < -1),]
df[which(df$X1 < -1),]
df
df[which(df$X1 < 0),]
df[df$X1 < 0,]
df[df$X1 < 0 | df$X1 >1 ,]
df[df$X1 < 0 | df$X1 > 1 ,]
which(df$X1 < 0 | df$X1 > 1)
sample(100,4)
set.seed(1)
sample(100,4)
sample(100,4)
sample(100,4)
sample(100,4)
sample(100,4)
set.seed(1)
sample(100,4)
df=matrix(cbind(a,b,c),nrow=10,ncol=3)
a=rep(0:1,5)
b=rep(0:10,10)
c=rep(0:10,10)
df=matrix(cbind(a,b,c),nrow=10,ncol=3)
df
a=rep(0:10,10)
matrix(1:9, nrow = 3, ncol = 3)
matrix(1:8, nrow = 2, ncol = 3)
matrix(1:8, nrow = 8, ncol = 1)
m = matrix(1:8, nrow = 8, ncol = 1)
m.transpose()
m = matrix(1:8, nrow = 8, ncol = 1)
m2 = matrix(8:16, nrow = 8, ncol = 1)
m = matrix(1:8, nrow = 8, ncol = 1)
m2 = matrix(9:16, nrow = 8, ncol = 1)
m3 <- cbind(m,m2)
m3
m2 = matrix(9:24, nrow = 8, ncol = 2)
m3 <- cbind(m,m2[,2])
m3
5/4
floor(5/4)
for (i in 5){
print(i)
}
x <- 5
for (i in x){
print(i)
}
for (i in range(x){
for (i in range(x)){
print(i)
}
print(i)
for (i in range(x)){
print(i)
}
for (i in range(x)){
print(i)
}
for (i in 0:x){
print(i)
}
a<-matrix(nrow=10,ncol=5)
b<-matrix(nrow=20,ncol=5)
a
x <- c(4, 1, 4, 5, 1, 6)
mtcars
df <- mtcars$mpg
df
df$mpg
len(df)
length(df)
length(mtcars$mpg)
month.days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
names(month.days) <- month.name
month.days
names(month.days)
base <- names(month.days)
bas
base
base <- cbind(base, month.days)
base
month.days
base
base <- cbind(base, month.days)
base
cbind(paste("ba","se",sep=""),month.days)
for (i in 0:2) {
print(i)
}
print($i)
print(%i)
names <- paste("a", 1:4, sep="")
names
test$mix1 <- months
test <- matrix(c(1:12))
test
test <- matrix(r(1:12))
test <- matrix(, nrow=1,ncol=12)
test
test[,1] <- months
test <- matrix(, ncol=12)
test
test[,1] <- months
names(month.days)
month.days.names
month.days
colnames(month.days)
colnames(month.days) <- 1
mtcars
colnames(mtcars)
colnames(mtcars) <- cbind(1:11)
colnames(mtcars)
mtcars
colnames(mtcars) <- cbind(paste("mix_",1:11,sep="")
colnames(mtcars) <- cbind(paste("mix_",1:11,sep=""))
colnames(mtcars) <- cbind(paste("mix_",1:11,sep=""))
colnames(mtcars)
mtcars
mixture <- matrix(names(month.days),ncol=1)
mixture
colnames(mtcars) <- cbind("test",paste("mix_",1:10,sep=""))
colnames(mtcars)
cbind("test",paste("mix_",1:10,sep=""))
rbind("test",paste("mix_",1:10,sep=""))
cbind(paste("mix_",0:10,sep=""))
colnames(mtcars) <- cbind("test",paste("mix_",0:10,sep=""))
colnames(mtcars) <- cbind(paste("mix_",0:10,sep=""))
colnames(mtcars)
mtcars
x <- c(4, 1, 4, 5, 1, 6)
print(x)
2^2
#install.packages("mashr")
library(ashr)
library(mashr)
set.seed(1)
simdata = simple_sims(500,2,1)
data = mash_set_data(simdata$Bhat, simdata$Shat)
U.pca = cov_pca(data,5,subset=data)
U.pca = cov_pca(data,5)
strong = c(1,3,8,4,5,10)
U.pca = cov_pca(data,5,subset=strong)
strong
strong = get_significant_results(data,0.05)
strong <- 1:10; x
strong <- 1:10; strong
U.pca = cov_pca(data,5,subset=strong)
strong <- 1:100; strong
U.pca = cov_pca(data,5,subset=strong)
strong <- 1:2
U.pca = cov_pca(data,5,subset=strong)
data
str(data)
names(U.c)
U.c = cov_canonical(data)
names(U.c)
#install.packages("mashr")
library(ashr)
library(mashr)
set.seed(1)
simdata = simple_sims(500,2,1)
str(simdata)
head(simdata$Shat)
head(simdata$Bhat)
data = mash_set_data(simdata$Bhat, simdata$Shat)
str(data)
head(data$Shat)
head(data$Shat_alpha)
simdata = simple_sims(500,2,1)
str(simdata)
nrow(simdata$Bhat)
head(simdata$Bhat)
head(simdata$Shat)
simdata = simple_sims(500,2,0.5)
str(simdata)
head(simdata$Shat)
data = mash_set_data(simdata$Bhat, simdata$Shat)
m.1by1 = mash_1by1(data)
rep=10
mix <- c("equal_0_1", "f_0_1", "m_0_1", "equal_1_1", "equal_0.25_1", "equal_0.5_1", "equal_0.75_1")
for (i in 1:rep) {
if (i==1) {
mixture <- matrix(mix, ncol=1)
}
mixture <- cbind(mixture, mix)
}
mixture
colnames(mixture) <- cbind("names",paste("mix_",1:rep,sep=""))
colnames(mixture) <- cbind(paste("mix_",1:rep,sep=""))
colnames(mixture)
length(colnames(mixture))
cbind("names",paste("mix_",1:rep,sep=""))
colnames(mixture) <- rbind("names",paste("mix_",1:rep,sep=""))
cbind("names",paste("mix_",1:rep,sep=""))
rbind("names",paste("mix_",1:rep,sep=""))
set.seed(1)
simdata = simple_sims(500,2,0.5)
#install.packages("mashr")
library(ashr)
library(mashr)
set.seed(1)
simdata = simple_sims(500,2,0.5)
data = mash_set_data(simdata$Bhat, simdata$Shat)
U.c = cov_canonical(data)
print(names(U.c))
m.c = mash(data, U.c)
paste("p",1)
paste("p",1,sep="")
paste("p",1,sep="") <- pm
paste("p",1,sep="") <- U.c
assign(paste0("x", "y"), 1)
for ( i in 1:3) {
assign(paste0("x", i), i)
}
x1+x2
g_array <- array(0)
g_array[,i] <- x1
g_array[i] <- x1
for ( i in 1:3) {
assign(paste0("x", i), i)
g_array[i] <- x1
}
g_array[i] <- paste("x",1,sep="")
for ( i in 1:3) {
assign(paste0("x", i), i)
g_array[i] <- paste("x",1,sep="")
}
g_array[i]
g_array[i] <- assign(paste0("x", i), i)
for ( i in 1:3) {
g_array[i] <- assign(paste0("x", i), i)
}
test <- function(x){
y <- x+2
y2 <- x+5
}
return y, y2
test <- function(x){
y <- x+2
y2 <- x+5
return(y, y2)
}
y1,y2 <- test(2)
(y1,y2) <- test(2)
(y1,y2) <- test(2)
c(y1,y2) <- test(2)
test <- function(x){
y <- x+2
y2 <- x+5
return(list(y,y2))
}
results <- test(2)
results[1]
results[[1]]
results[[2]]
head(mtcars)
min(mtcars$mpg)
min(mtcars[mtcars$mpg != 10.4,])
min(mtcars[mtcars$mpg != 10.4,])
mtcars[mtcars$mpg != 10.4,]
min(mtcars[mtcars$mpg != 10.4,]$mpg)
min(mtcars$mpg)
mtcars$mpg[mtcars$mpg == 10.4] <- 13.3
min(mtcars$mpg)
head(mtcars)
null.model <- lm(mpg ~ cyl, data=mtcars)
str(null.model)
head(null.model$rank)
head(null.model$fitted.values)
head(mtcars)
head(null.model$effects)
head(null.model$coefficients)
null.model$coefficients
summary(null.model)
summary(null.model)$r.squared
summary(null.model)$coefficients
null.model <- lm(mpg ~ cyl, data=mtcars)
str(null.model)
summary(null.model)
summary(null.model)$f-statistic
names(summary(null.model))
summary(null.model)$fstatistic
for(i in 1:6) { #-- Create objects  'r.1', 'r.2', ... 'r.6' --
nam <- paste("r", i, sep = ".")
assign(nam, 1:i)
}
r.2
head(mtcars)
null.model <- lm(mpg ~ cyl, data=mtcars)
model <- lm(mpg ~ cyl, data=mtcars)
summary(model)
summary(model)$residuals
summary(model)
str(model)
str(model)$df.residual
str(model)
model$df.residual
str(model)
model$fitted.values
summary(model)$residuals
head(mtcars)
model.fitted <- NULL
model.fitted <- rbind(model.fitted, model$fitted.values)
head(model.fitted)
model.fitted <- rbind(model.fitted, model$fitted.values)
head(model.fitted)
nrow(model.fitted)
model.fitted <- rbind(model.fitted, model$fitted.values)
nrow(model.fitted)
model.fitted <- NULL
model.fitted <- cbind(model.fitted, model$fitted.values)
head(model.fitted)
model.fitted <- data.frame(cbind(model.fitted, model$fitted.values))
model.fitted <- NULL
model.fitted <- data.frame(cbind(model.fitted, model$fitted.values))
head(model.fitted)
model.fitted <- NULL
model.fitted <- data.frame(model.fitted, model$fitted.values)
head(model.fitted)
model.fitted <- NULL
model.fitted <- cbind(model.fitted, data.frame(model$fitted.values))
model.fitted <- NULL
model.fitted <- cbind(model.fitted, model$fitted.values)
head(model.fitted)
p.threshold <- c('1', '0.01', '1e-5', '1e-8')
pgs.fitted <- data.frame(matrix(ncol=length(p.threshold),nrow=0))
colnames(pgs.fitted) <- p.threshold
head(pgs.fitted)
pgs.fitted$i
pgs.fitted$i <- model.$fitted.values
pgs.fitted$i <- model$fitted.values
pgs.fitted$i <- model$fitted.values
pgs.fitted$i <-
model$fitted.values
pgs.fitted$i <-
model$fitted.values
model$fitted.values
c(model$fitted.values)
str(model$fitted.values)
model.fitted <- NULL
for (i in p.threshold) {
model.fitted <- rbind(model.fitted, data.frame(Threshold=i, model$fitted.values))
}
str(model.fitted)
head(model.fitted)
for (i in p.threshold) {
model.fitted <- rbind(model.fitted, data.frame(i = model$fitted.values))
}
model.fitted <- NULL
for (i in p.threshold) {
model.fitted <- rbind(model.fitted, data.frame(i = model$fitted.values))
}
head(model.fitted)
model.fitted <- NULL
for (i in p.threshold) {
model.fitted <- rbind(model.fitted, data.frame(model$fitted.values))
}
head(model.fitted)
nrow(model.fitted)
model.fitted <- NULL
for (i in p.threshold) {
model.fitted <- cbind(model.fitted, data.frame(model$fitted.values))
}
height_f=c(0.2056,0.1590,0.2142)
height_m=c(0.2075,0.1441,0.2028)
bmi_f=c(0.0604,0.0346,0.0582)
bmi_m=c(0.0546,0.0346,0.0566)
testosterone_f=c(0.0005,0.0082,0.0076)
testosterone_m=c(0.0652,0.0636,0.0627)
waist_hip_bmi_f=c(0.0425,0.0516,0.0490)
waist_hip_bmi_m=c(0.0161,0.0135,0.0166)
df <- cbind(height_f,height_m,bmi_f,bmi_m,testosterone_f,testosterone_m,waist_hip_bmi_f,waist_hip_bmi_m)
types<-c('Add-both',"Add-same","mash-same")
rownames(df) <- types
df
colors=c('azure1','azure2','azure3')
barplot(df,beside=T,col=colors,ylim=c(0,0.26),legend=TRUE,args.legend=(list(x="top",ncol=3)))
x1 <- c(1,2,3,4,5)
assign(test,x1)
head(mtcars)
head(paste0('mt','cars')$mpg)
test <- list(c1=mtcars$mpg, c2=mtcars$cyl)
str(test)
test$c1
sex <- c1
test$sex
test$paste0(sex)
test$sex
test$paste0()
test$paste0(sex)
test[sex]
sex <- 'c1'
test[sex]
test <-function(x,y,z=1){
print(x+y+z)
}
test(1,2,3)
test(1,2)
head(mtcars)
mtcars[3,]
mtcars[,3]
str(cars)
str(cars)
str(mtcars)
mtcars[,8] < factor(mtcars[,8])
mtcars[,8] <- factor(mtcars[,8])
str(mtcars)
#######
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
#######
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
#######
sample <- sample(c(TRUE, FALSE), nrow(mtcars), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
train <- mtcars[sample, ]
test <- mtcars[!sample, ]
head(test)
install.packages('tidyverse')
library(tidyverse)
data(iris)
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point()
print(IrisPlot)
+ labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point()
+ labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point()
+ labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + title("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + ggtitle("Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length", title="Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + opts(title="Title")
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + ggtitle(title="Title")
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length") + ggtitle("Title")
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length", title="Petal and Sepal Length of Iris") +
theme(plot.title = element_markdown())
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length", title="Petal and Sepal Length of Iris") +
theme(plot.title = element_text())
IrisPlot <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() +
labs(y="Petal Length", x="Sepal Length", title="Petal and Sepal Length of Iris")
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, colour=Species))
+ geom_point()
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, colour=Species)) + geom_point()
print(IrisPlot)
print(IrisPlot + labs(y="Petal length (cm)", x = "Sepal length (cm)") + ggtitle("Petal and sepal length of iris"))
library(ggplot2)
library(ggpubr)
library(reshape2)
library(ggsci)
# set up and load in files
pheno <- "weight"
# set up and load in files
pheno <- "height"
setwd("~/Research/GWAS-frontera/Phenotypes")
df_testosterone <- read.csv("pheno_testosterone.txt", sep="\t", colClasses = c("NULL","integer","numeric"))
df_pheno <- read.csv(paste0("pheno_",pheno,".txt"), sep="\t", colClasses = c("NULL","integer","numeric"))
df_sex <- read.csv("sex_ids.txt", sep="\t")
colnames(df_pheno) <- c('IID','pheno')
# get PGS scores
setwd(paste0("~/Research/GWAS-frontera/GWAS_results/",pheno))
