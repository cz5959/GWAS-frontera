formula <- "pheno ~ both"
} else {
formula <- paste0("pheno ~ ", type, "_", sex)
}
for (i in 1:n) {
bin <- data[cuts == levels(cuts)[i],]
model <- lm(formula, data = bin)
beta <- model$coefficients[2]
stderror <- summary(model)$coefficients[2,2]
T_mean <- mean(bin$testosterone)
results <- rbind(results, data.frame(Testosterone=T_mean, Beta=beta, Error=stderror, Sex=sex, Type=type))
}
}
return(results)
}
# call function for overlap and nonoverlaps
m_results <- bin_fun(df_m,10,'male')
f_results <- bin_fun(df_f,10,'female')
overlap_results_m <- bin_fun(overlap[overlap$sex=='male',],1,'male')
overlap_results_f <- bin_fun(overlap[overlap$sex=='female',],1,'female')
overlap_results <- rbind(overlap_results_m, overlap_results_f)
results <- rbind(m_results, f_results)
results_all <- rbind(rbind(rbind(m_results, f_results), overlap_results_m), overlap_results_f)
results_long <- melt(results, id.vars=c("Testosterone","Sex"))
labels <- c(add="additive sex-specific", both="additive both-sex", mash="mash sex-specific")
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Height"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results_all, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results_all, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
# set up and load in files
pheno <- "arm_fatfree_mass_L"
setwd("~/Research/GWAS-frontera/Phenotypes")
df_testosterone <- read.csv("pheno_testosterone.txt", sep="\t", colClasses = c("NULL","integer","numeric"))
df_pheno <- read.csv(paste0("pheno_",pheno,".txt"), sep="\t", colClasses = c("NULL","integer","numeric"))
df_sex <- read.csv("sex_ids.txt", sep="\t")
colnames(df_pheno) <- c('IID','pheno')
# get PGS scores
setwd(paste0("~/Research/GWAS-frontera/GWAS_results/",pheno))
df_both <- read.csv(paste0("both_sex_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_f <- read.csv(paste0("female_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_m <- read.csv(paste0("male_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_f <- read.csv(paste0("female_mash_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_m <- read.csv(paste0("male_mash_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
score <- Reduce(function(x,y) merge(x,y, by='IID'), list(df_both, df_add_f, df_add_m, df_mash_f, df_mash_m))
colnames(score) <- c('IID', 'both', 'add_female', 'add_male', 'mash_female', 'mash_male')
# merge dataframes - testosterone, sex, pheno, pgs scores f, pgs scores m
df <- merge(merge(df_testosterone, df_sex, by='IID'), df_pheno, by='IID')
df <- merge(df,score,by='IID')
# order by testosterone
df <- df[order(df$testosterone),]
# label then split by sex
df$sex[df$sex == 1] <- 'male'
df$sex[df$sex == 0] <- 'female'
df_m <- df[df$sex == 'male',]
df_f <- df[df$sex == 'female',]
# find intercept for overlaps
f_inter = mean(df_f$testosterone) + 2*sd(df_f$testosterone)
m_inter = mean(df_m$testosterone) - 2*sd(df_m$testosterone)
# histogram of testosterone frequency between sex
ggplot(df, aes(x=testosterone, fill=sex)) +
geom_histogram(alpha=0.5, position='identity', bins=50) +
geom_vline(xintercept = f_inter, color='red') +
geom_vline(xintercept = m_inter, color='blue')
# create dataframe with the overlaps
overlap <- df_m[df_m$testosterone <= m_inter,]
overlap <- rbind(overlap, df_f[df_f$testosterone >= f_inter,])
# remove overlapping from the non-overlapping df
df_m <- df_m[! df_m$IID %in% overlap$IID,]
df_f <- df_f[! df_f$IID %in% overlap$IID,]
# get lm results from each testosterone bin
bin_fun <- function(data, n, sex) {
intervals = seq(0,nrow(data),nrow(data)/n)
cuts <- cut(1:nrow(data), breaks = intervals)
results <- NULL
types <- c('both', 'add', 'mash')
#types <- c('add')
for (type in types) {
if (type == 'both') {
formula <- "pheno ~ both"
} else {
formula <- paste0("pheno ~ ", type, "_", sex)
}
for (i in 1:n) {
bin <- data[cuts == levels(cuts)[i],]
model <- lm(formula, data = bin)
beta <- model$coefficients[2]
stderror <- summary(model)$coefficients[2,2]
T_mean <- mean(bin$testosterone)
results <- rbind(results, data.frame(Testosterone=T_mean, Beta=beta, Error=stderror, Sex=sex, Type=type))
}
}
return(results)
}
# call function for overlap and nonoverlaps
m_results <- bin_fun(df_m,10,'male')
f_results <- bin_fun(df_f,10,'female')
overlap_results_m <- bin_fun(overlap[overlap$sex=='male',],1,'male')
overlap_results_f <- bin_fun(overlap[overlap$sex=='female',],1,'female')
overlap_results <- rbind(overlap_results_m, overlap_results_f)
results <- rbind(m_results, f_results)
results_all <- rbind(rbind(rbind(m_results, f_results), overlap_results_m), overlap_results_f)
results_long <- melt(results, id.vars=c("Testosterone","Sex"))
labels <- c(add="additive sex-specific", both="additive both-sex", mash="mash sex-specific")
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("BMI"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Arm fat-free mass (L)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
# set up and load in files
pheno <- "arm_fatfree_mass_R"
setwd("~/Research/GWAS-frontera/Phenotypes")
df_testosterone <- read.csv("pheno_testosterone.txt", sep="\t", colClasses = c("NULL","integer","numeric"))
df_pheno <- read.csv(paste0("pheno_",pheno,".txt"), sep="\t", colClasses = c("NULL","integer","numeric"))
df_sex <- read.csv("sex_ids.txt", sep="\t")
colnames(df_pheno) <- c('IID','pheno')
# get PGS scores
setwd(paste0("~/Research/GWAS-frontera/GWAS_results/",pheno))
df_both <- read.csv(paste0("both_sex_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_f <- read.csv(paste0("female_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_m <- read.csv(paste0("male_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_f <- read.csv(paste0("female_mash_",pheno,".1.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_m <- read.csv(paste0("male_mash_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
score <- Reduce(function(x,y) merge(x,y, by='IID'), list(df_both, df_add_f, df_add_m, df_mash_f, df_mash_m))
colnames(score) <- c('IID', 'both', 'add_female', 'add_male', 'mash_female', 'mash_male')
# merge dataframes - testosterone, sex, pheno, pgs scores f, pgs scores m
df <- merge(merge(df_testosterone, df_sex, by='IID'), df_pheno, by='IID')
df <- merge(df,score,by='IID')
# order by testosterone
df <- df[order(df$testosterone),]
# label then split by sex
df$sex[df$sex == 1] <- 'male'
df$sex[df$sex == 0] <- 'female'
df_m <- df[df$sex == 'male',]
df_f <- df[df$sex == 'female',]
# find intercept for overlaps
f_inter = mean(df_f$testosterone) + 2*sd(df_f$testosterone)
m_inter = mean(df_m$testosterone) - 2*sd(df_m$testosterone)
# histogram of testosterone frequency between sex
ggplot(df, aes(x=testosterone, fill=sex)) +
geom_histogram(alpha=0.5, position='identity', bins=50) +
geom_vline(xintercept = f_inter, color='red') +
geom_vline(xintercept = m_inter, color='blue')
# create dataframe with the overlaps
overlap <- df_m[df_m$testosterone <= m_inter,]
overlap <- rbind(overlap, df_f[df_f$testosterone >= f_inter,])
# remove overlapping from the non-overlapping df
df_m <- df_m[! df_m$IID %in% overlap$IID,]
df_f <- df_f[! df_f$IID %in% overlap$IID,]
# get lm results from each testosterone bin
bin_fun <- function(data, n, sex) {
intervals = seq(0,nrow(data),nrow(data)/n)
cuts <- cut(1:nrow(data), breaks = intervals)
results <- NULL
types <- c('both', 'add', 'mash')
#types <- c('add')
for (type in types) {
if (type == 'both') {
formula <- "pheno ~ both"
} else {
formula <- paste0("pheno ~ ", type, "_", sex)
}
for (i in 1:n) {
bin <- data[cuts == levels(cuts)[i],]
model <- lm(formula, data = bin)
beta <- model$coefficients[2]
stderror <- summary(model)$coefficients[2,2]
T_mean <- mean(bin$testosterone)
results <- rbind(results, data.frame(Testosterone=T_mean, Beta=beta, Error=stderror, Sex=sex, Type=type))
}
}
return(results)
}
# call function for overlap and nonoverlaps
m_results <- bin_fun(df_m,10,'male')
f_results <- bin_fun(df_f,10,'female')
overlap_results_m <- bin_fun(overlap[overlap$sex=='male',],1,'male')
overlap_results_f <- bin_fun(overlap[overlap$sex=='female',],1,'female')
overlap_results <- rbind(overlap_results_m, overlap_results_f)
results <- rbind(m_results, f_results)
results_all <- rbind(rbind(rbind(m_results, f_results), overlap_results_m), overlap_results_f)
results_long <- melt(results, id.vars=c("Testosterone","Sex"))
labels <- c(add="additive sex-specific", both="additive both-sex", mash="mash sex-specific")
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Arm fat-free mass (L)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Arm fat-free mass (R)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
# set up and load in files
pheno <- "diastolicBP_auto"
setwd("~/Research/GWAS-frontera/Phenotypes")
df_testosterone <- read.csv("pheno_testosterone.txt", sep="\t", colClasses = c("NULL","integer","numeric"))
df_pheno <- read.csv(paste0("pheno_",pheno,".txt"), sep="\t", colClasses = c("NULL","integer","numeric"))
df_sex <- read.csv("sex_ids.txt", sep="\t")
colnames(df_pheno) <- c('IID','pheno')
# get PGS scores
setwd(paste0("~/Research/GWAS-frontera/GWAS_results/",pheno))
df_both <- read.csv(paste0("both_sex_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_f <- read.csv(paste0("female_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_m <- read.csv(paste0("male_additive_",pheno,".0.01.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_f <- read.csv(paste0("female_mash_",pheno,".1.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_m <- read.csv(paste0("male_mash_",pheno,".1.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
score <- Reduce(function(x,y) merge(x,y, by='IID'), list(df_both, df_add_f, df_add_m, df_mash_f, df_mash_m))
colnames(score) <- c('IID', 'both', 'add_female', 'add_male', 'mash_female', 'mash_male')
# merge dataframes - testosterone, sex, pheno, pgs scores f, pgs scores m
df <- merge(merge(df_testosterone, df_sex, by='IID'), df_pheno, by='IID')
df <- merge(df,score,by='IID')
# order by testosterone
df <- df[order(df$testosterone),]
# label then split by sex
df$sex[df$sex == 1] <- 'male'
df$sex[df$sex == 0] <- 'female'
df_m <- df[df$sex == 'male',]
df_f <- df[df$sex == 'female',]
# find intercept for overlaps
f_inter = mean(df_f$testosterone) + 2*sd(df_f$testosterone)
m_inter = mean(df_m$testosterone) - 2*sd(df_m$testosterone)
# histogram of testosterone frequency between sex
ggplot(df, aes(x=testosterone, fill=sex)) +
geom_histogram(alpha=0.5, position='identity', bins=50) +
geom_vline(xintercept = f_inter, color='red') +
geom_vline(xintercept = m_inter, color='blue')
# create dataframe with the overlaps
overlap <- df_m[df_m$testosterone <= m_inter,]
overlap <- rbind(overlap, df_f[df_f$testosterone >= f_inter,])
# remove overlapping from the non-overlapping df
df_m <- df_m[! df_m$IID %in% overlap$IID,]
df_f <- df_f[! df_f$IID %in% overlap$IID,]
# get lm results from each testosterone bin
bin_fun <- function(data, n, sex) {
intervals = seq(0,nrow(data),nrow(data)/n)
cuts <- cut(1:nrow(data), breaks = intervals)
results <- NULL
types <- c('both', 'add', 'mash')
#types <- c('add')
for (type in types) {
if (type == 'both') {
formula <- "pheno ~ both"
} else {
formula <- paste0("pheno ~ ", type, "_", sex)
}
for (i in 1:n) {
bin <- data[cuts == levels(cuts)[i],]
model <- lm(formula, data = bin)
beta <- model$coefficients[2]
stderror <- summary(model)$coefficients[2,2]
T_mean <- mean(bin$testosterone)
results <- rbind(results, data.frame(Testosterone=T_mean, Beta=beta, Error=stderror, Sex=sex, Type=type))
}
}
return(results)
}
# call function for overlap and nonoverlaps
m_results <- bin_fun(df_m,10,'male')
f_results <- bin_fun(df_f,10,'female')
overlap_results_m <- bin_fun(overlap[overlap$sex=='male',],1,'male')
overlap_results_f <- bin_fun(overlap[overlap$sex=='female',],1,'female')
overlap_results <- rbind(overlap_results_m, overlap_results_f)
results <- rbind(m_results, f_results)
results_all <- rbind(rbind(rbind(m_results, f_results), overlap_results_m), overlap_results_f)
results_long <- melt(results, id.vars=c("Testosterone","Sex"))
labels <- c(add="additive sex-specific", both="additive both-sex", mash="mash sex-specific")
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Arm fat-free mass (R)"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("DiastolicBP"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Diastolic BP"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
# set up and load in files
pheno <- "calcium"
setwd("~/Research/GWAS-frontera/Phenotypes")
df_testosterone <- read.csv("pheno_testosterone.txt", sep="\t", colClasses = c("NULL","integer","numeric"))
df_pheno <- read.csv(paste0("pheno_",pheno,".txt"), sep="\t", colClasses = c("NULL","integer","numeric"))
df_sex <- read.csv("sex_ids.txt", sep="\t")
colnames(df_pheno) <- c('IID','pheno')
# get PGS scores
setwd(paste0("~/Research/GWAS-frontera/GWAS_results/",pheno))
# get PGS scores
setwd(paste0("~/Research/GWAS-frontera/GWAS_results/",pheno))
df_both <- read.csv(paste0("both_sex_additive_",pheno,".1e-5.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_f <- read.csv(paste0("female_additive_",pheno,".1e-5.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_add_m <- read.csv(paste0("male_additive_",pheno,".1e-5.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_f <- read.csv(paste0("female_mash_",pheno,".1e-5.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
df_mash_m <- read.csv(paste0("male_mash_",pheno,".1e-5.profile"),sep="", colClasses= c("NULL","integer",rep("NULL",3),"numeric"))
score <- Reduce(function(x,y) merge(x,y, by='IID'), list(df_both, df_add_f, df_add_m, df_mash_f, df_mash_m))
colnames(score) <- c('IID', 'both', 'add_female', 'add_male', 'mash_female', 'mash_male')
# merge dataframes - testosterone, sex, pheno, pgs scores f, pgs scores m
df <- merge(merge(df_testosterone, df_sex, by='IID'), df_pheno, by='IID')
df <- merge(df,score,by='IID')
# order by testosterone
df <- df[order(df$testosterone),]
# label then split by sex
df$sex[df$sex == 1] <- 'male'
df$sex[df$sex == 0] <- 'female'
df_m <- df[df$sex == 'male',]
df_f <- df[df$sex == 'female',]
# find intercept for overlaps
f_inter = mean(df_f$testosterone) + 2*sd(df_f$testosterone)
m_inter = mean(df_m$testosterone) - 2*sd(df_m$testosterone)
# histogram of testosterone frequency between sex
ggplot(df, aes(x=testosterone, fill=sex)) +
geom_histogram(alpha=0.5, position='identity', bins=50) +
geom_vline(xintercept = f_inter, color='red') +
geom_vline(xintercept = m_inter, color='blue')
# create dataframe with the overlaps
overlap <- df_m[df_m$testosterone <= m_inter,]
overlap <- rbind(overlap, df_f[df_f$testosterone >= f_inter,])
# remove overlapping from the non-overlapping df
df_m <- df_m[! df_m$IID %in% overlap$IID,]
df_f <- df_f[! df_f$IID %in% overlap$IID,]
# get lm results from each testosterone bin
bin_fun <- function(data, n, sex) {
intervals = seq(0,nrow(data),nrow(data)/n)
cuts <- cut(1:nrow(data), breaks = intervals)
results <- NULL
types <- c('both', 'add', 'mash')
#types <- c('add')
for (type in types) {
if (type == 'both') {
formula <- "pheno ~ both"
} else {
formula <- paste0("pheno ~ ", type, "_", sex)
}
for (i in 1:n) {
bin <- data[cuts == levels(cuts)[i],]
model <- lm(formula, data = bin)
beta <- model$coefficients[2]
stderror <- summary(model)$coefficients[2,2]
T_mean <- mean(bin$testosterone)
results <- rbind(results, data.frame(Testosterone=T_mean, Beta=beta, Error=stderror, Sex=sex, Type=type))
}
}
return(results)
}
# call function for overlap and nonoverlaps
m_results <- bin_fun(df_m,10,'male')
f_results <- bin_fun(df_f,10,'female')
overlap_results_m <- bin_fun(overlap[overlap$sex=='male',],1,'male')
overlap_results_f <- bin_fun(overlap[overlap$sex=='female',],1,'female')
overlap_results <- rbind(overlap_results_m, overlap_results_f)
results <- rbind(m_results, f_results)
results_all <- rbind(rbind(rbind(m_results, f_results), overlap_results_m), overlap_results_f)
results_long <- melt(results, id.vars=c("Testosterone","Sex"))
labels <- c(add="additive sex-specific", both="additive both-sex", mash="mash sex-specific")
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Diastolic BP"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
ggplot(results, aes(x=Testosterone, y=Beta, color=Sex)) +
geom_point(size=2) +
geom_point(data=overlap_results, aes(x=Testosterone, y=Beta, color=Sex), shape=1) +
geom_errorbar(aes(ymin=Beta-Error, ymax=Beta+Error), alpha= 0.4, show.legend = TRUE) +
geom_smooth(data=results, method="lm",alpha=0.1) +
labs(title=paste0("Calcium"," to PGS Regression by Testosterone Levels"), x="Testosterone Level", y="Phenotype to PGS") +
theme(axis.text = element_text(size=12), axis.title = element_text(size=16), plot.title=element_text(size=20),
legend.title=element_text(size=14), legend.text=element_text(size=12)) +
facet_wrap(~Type, ncol=1, scales="free_y", labeller=labeller(Type=labels)) +
stat_cor(method='pearson', p.accuracy=0.001, label.x.npc=0.6, label.y.npc=1, show.legend=FALSE)
